diff --git a/node_modules/jstack-shared/.bun-tag-17f9b36a511bcc0a b/.bun-tag-17f9b36a511bcc0a
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/jstack-shared/.bun-tag-21b35236b8bd4120 b/.bun-tag-21b35236b8bd4120
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/jstack-shared/.bun-tag-37fd86b4625d0c99 b/.bun-tag-37fd86b4625d0c99
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/jstack-shared/.bun-tag-465fa5a077ebc397 b/.bun-tag-465fa5a077ebc397
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/jstack-shared/.bun-tag-8156b3bde321f1c7 b/.bun-tag-8156b3bde321f1c7
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/jstack-shared/.bun-tag-b73de1aaee52d17f b/.bun-tag-b73de1aaee52d17f
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/node_modules/jstack-shared/.bun-tag-ea50255e6048924d b/.bun-tag-ea50255e6048924d
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/dist/index.cjs b/dist/index.cjs
index 27d95247acf8ca59cdac6f79f9a2000e82e47028..b894e10f1af27e4d3effc516c0cc1307a3403d37 100644
--- a/dist/index.cjs
+++ b/dist/index.cjs
@@ -4415,7 +4415,7 @@ var EventEmitter = class {
   on(event, callback) {
     if (!callback) {
       logger.error(
-        `No callback provided for event handler "${event.toString()}". Ppass a callback to handle this event.`
+        `No callback provided for event handler "${event.toString()}". Pass a callback to handle this event.`
       );
       return;
     }
@@ -4427,7 +4427,7 @@ var EventEmitter = class {
 
 // src/socket.ts
 var ServerSocket = class {
-  room = "DEFAULT_ROOM";
+  subscribedRooms = /* @__PURE__ */ new Map();
   ws;
   controllers = /* @__PURE__ */ new Map();
   emitter;
@@ -4463,7 +4463,7 @@ var ServerSocket = class {
     });
   }
   get rooms() {
-    return [this.room];
+    return Array.from(this.subscribedRooms.keys());
   }
   close() {
     this.ws.close();
@@ -4489,22 +4489,29 @@ var ServerSocket = class {
   handleEvent(eventName, eventData) {
     this.emitter.handleEvent(eventName, eventData);
   }
-  async join(room) {
-    this.room = room;
+  join(room) {
     logger.info(`Socket trying to join room: "${room}".`);
-    await this.subscribe(room).catch((error) => {
-      logger.error(`Subscription error for room ${room}:`, error);
-    }).then(() => logger.success(`Joined room: ${room}`)).then(() => this.createHeartbeat(room));
+    const status = this.subscribedRooms.get(room)?.status;
+    if (status === "connecting" || status === "connected") {
+      logger.warn(`Socket is already ${status} to room: "${room}". Skipping...`);
+      return;
+    }
+    setTimeout(() => {
+      const status2 = this.subscribedRooms.get(room)?.status;
+      if (status2 === "connecting" || status2 === "connected") {
+        logger.warn(`Socket is already ${status2} to room: "${room}". Skipping...`);
+        return;
+      }
+      this.subscribedRooms.set(room, { status: "connecting" });
+      this.subscribe(room).catch((error) => {
+        logger.error(`Subscription error for room ${room}:`, error);
+        this.subscribedRooms.set(room, { status: "disconnected" });
+      }).then(() => logger.success(`Joined room: ${room}`)).then(() => this.createHeartbeat(room));
+    }, Math.random() * 30);
   }
   leave(room) {
-    const controller = this.controllers.get(room);
-    if (controller) {
-      controller.abort();
-      this.controllers.delete(room);
-      logger.info(`Left room: ${room}`);
-    } else {
-      logger.warn(`Attempted to leave room "${room}" but no active controller found`);
-    }
+    this.unsubscribe(room);
+    logger.info(`Left room: ${room}`);
   }
   createHeartbeat(room) {
     const heartbeat = {
@@ -4524,8 +4531,11 @@ var ServerSocket = class {
   async subscribe(room) {
     return new Promise(async (resolve, reject) => {
       try {
+        if (this.subscribedRooms.get(room)?.status === "connected") {
+          resolve();
+          return;
+        }
         const controller = new AbortController();
-        this.controllers.set(room, controller);
         this.lastPingTimes.set(room, Date.now());
         const stream = await fetch(`${this.redisUrl}/subscribe/${room}`, {
           headers: {
@@ -4534,9 +4544,14 @@ var ServerSocket = class {
           },
           signal: controller.signal
         });
+        if (this.controllers.has(room)) {
+          this.controllers.get(room)?.abort();
+        }
+        this.controllers.set(room, controller);
         const reader = stream.body?.getReader();
         const decoder = new TextDecoder();
         let buffer = "";
+        this.subscribedRooms.set(room, { status: "connected" });
         while (reader) {
           const { done, value } = await reader.read();
           resolve();
@@ -4546,7 +4561,6 @@ var ServerSocket = class {
           const messages = buffer.split("\n");
           buffer = messages.pop() || "";
           for (const message of messages) {
-            logger.info("Received message:", message);
             if (message.startsWith("data: ")) {
               const data = message.slice(6);
               try {
@@ -4561,13 +4575,26 @@ var ServerSocket = class {
                   logger.warn("Missing payload in message");
                   continue;
                 }
-                const parsed = JSON.parse(payloadStr);
-                if (parsed[0] === "ping") {
-                  logger.success("Heartbeat received successfully");
-                  this.lastPingTimes.set(room, Date.now());
+                const maybePingMessage = payloadStr.substring(0, 8);
+                if (maybePingMessage.includes("ping")) {
+                  const abortController = this.controllers.get(room);
+                  const status = this.subscribedRooms.get(room)?.status;
+                  if (!abortController || status !== "connected") {
+                    logger.warn(`Halting heartbeat for room: ${room}`);
+                    abortController?.abort();
+                    this.subscribedRooms.set(room, { status: "disconnected" });
+                    return;
+                  } else {
+                    const newLastPingTime = Date.now();
+                    const lastPingTime = this.lastPingTimes.get(room) ?? newLastPingTime;
+                    this.lastPingTimes.set(room, newLastPingTime);
+                    this.handleEvent("onHeartbeat", { lastPingTime, room });
+                    continue;
+                  }
                 }
                 if (this.ws.readyState === WebSocket.OPEN) {
-                  this.ws.send(JSON.stringify(parsed));
+                  if (typeof payloadStr === "string") this.ws.send(payloadStr);
+                  else this.ws.send(JSON.stringify(payloadStr));
                 } else {
                   logger.debug("WebSocket not open, skipping message");
                 }
@@ -4586,11 +4613,18 @@ var ServerSocket = class {
     const controller = this.controllers.get(room);
     if (controller) {
       controller.abort();
-      this.controllers.delete(room);
-      logger.info(`Unsubscribed from room: ${room}`);
     } else {
       logger.warn(`No active subscription found for room: ${room}`);
     }
+    const heartbeat = this.heartbeatTimers.get(room);
+    if (heartbeat) {
+      clearInterval(heartbeat.sender);
+      clearInterval(heartbeat.monitor);
+    }
+    this.controllers.delete(room);
+    this.heartbeatTimers.delete(room);
+    this.subscribedRooms.set(room, { status: "disconnected" });
+    logger.info(`Unsubscribed from room: ${room}`);
   }
 };
 var ClientSocket = class {
@@ -4681,7 +4715,8 @@ Fix this issue: https://jstack.app/docs/getting-started/local-development
         const [eventName, eventData] = parseResult.data;
         this.emitter.handleEvent(eventName, eventData);
       } else {
-        logger.warn("Unable to parse event:", event.data);
+        logger.warn("Unable to parse event:", event);
+        logger.warn("Raw event:", event);
       }
     };
   }
diff --git a/dist/index.d.cts b/dist/index.d.cts
index 373e563d5c46e9b3bbf6234a2541f11c057b12c7..8e7cfd038ef8ef05804f7e8d89c8ca0487292377 100644
--- a/dist/index.d.cts
+++ b/dist/index.d.cts
@@ -17,9 +17,13 @@ interface ServerSocketOptions {
 interface SystemEvents {
     onConnect: void;
     onError: Error;
+    onHeartbeat: {
+        lastPingTime: number;
+        room: string;
+    };
 }
 declare class ServerSocket<IncomingEvents, OutgoingEvents> {
-    private room;
+    private subscribedRooms;
     private ws;
     private controllers;
     private emitter;
@@ -35,7 +39,7 @@ declare class ServerSocket<IncomingEvents, OutgoingEvents> {
     on<K extends keyof IncomingEvents>(event: K, callback?: (data: IncomingEvents[K]) => any): void;
     emit<K extends keyof OutgoingEvents>(event: K, data: OutgoingEvents[K]): boolean;
     handleEvent(eventName: string, eventData: unknown): void;
-    join(room: string): Promise<void>;
+    join(room: string): void;
     leave(room: string): void;
     private createHeartbeat;
     private subscribe;
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 373e563d5c46e9b3bbf6234a2541f11c057b12c7..8e7cfd038ef8ef05804f7e8d89c8ca0487292377 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -17,9 +17,13 @@ interface ServerSocketOptions {
 interface SystemEvents {
     onConnect: void;
     onError: Error;
+    onHeartbeat: {
+        lastPingTime: number;
+        room: string;
+    };
 }
 declare class ServerSocket<IncomingEvents, OutgoingEvents> {
-    private room;
+    private subscribedRooms;
     private ws;
     private controllers;
     private emitter;
@@ -35,7 +39,7 @@ declare class ServerSocket<IncomingEvents, OutgoingEvents> {
     on<K extends keyof IncomingEvents>(event: K, callback?: (data: IncomingEvents[K]) => any): void;
     emit<K extends keyof OutgoingEvents>(event: K, data: OutgoingEvents[K]): boolean;
     handleEvent(eventName: string, eventData: unknown): void;
-    join(room: string): Promise<void>;
+    join(room: string): void;
     leave(room: string): void;
     private createHeartbeat;
     private subscribe;
diff --git a/dist/index.js b/dist/index.js
index 032fb2bdea30184b2186ddef5e2f2fd39a88a1c1..1347616fb61cfda2335243c40f37799025c41c70 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -4406,7 +4406,7 @@ var EventEmitter = class {
   on(event, callback) {
     if (!callback) {
       logger.error(
-        `No callback provided for event handler "${event.toString()}". Ppass a callback to handle this event.`
+        `No callback provided for event handler "${event.toString()}". Pass a callback to handle this event.`
       );
       return;
     }
@@ -4418,7 +4418,7 @@ var EventEmitter = class {
 
 // src/socket.ts
 var ServerSocket = class {
-  room = "DEFAULT_ROOM";
+  subscribedRooms = /* @__PURE__ */ new Map();
   ws;
   controllers = /* @__PURE__ */ new Map();
   emitter;
@@ -4454,7 +4454,7 @@ var ServerSocket = class {
     });
   }
   get rooms() {
-    return [this.room];
+    return Array.from(this.subscribedRooms.keys());
   }
   close() {
     this.ws.close();
@@ -4480,22 +4480,29 @@ var ServerSocket = class {
   handleEvent(eventName, eventData) {
     this.emitter.handleEvent(eventName, eventData);
   }
-  async join(room) {
-    this.room = room;
+  join(room) {
     logger.info(`Socket trying to join room: "${room}".`);
-    await this.subscribe(room).catch((error) => {
-      logger.error(`Subscription error for room ${room}:`, error);
-    }).then(() => logger.success(`Joined room: ${room}`)).then(() => this.createHeartbeat(room));
+    const status = this.subscribedRooms.get(room)?.status;
+    if (status === "connecting" || status === "connected") {
+      logger.warn(`Socket is already ${status} to room: "${room}". Skipping...`);
+      return;
+    }
+    setTimeout(() => {
+      const status2 = this.subscribedRooms.get(room)?.status;
+      if (status2 === "connecting" || status2 === "connected") {
+        logger.warn(`Socket is already ${status2} to room: "${room}". Skipping...`);
+        return;
+      }
+      this.subscribedRooms.set(room, { status: "connecting" });
+      this.subscribe(room).catch((error) => {
+        logger.error(`Subscription error for room ${room}:`, error);
+        this.subscribedRooms.set(room, { status: "disconnected" });
+      }).then(() => logger.success(`Joined room: ${room}`)).then(() => this.createHeartbeat(room));
+    }, Math.random() * 30);
   }
   leave(room) {
-    const controller = this.controllers.get(room);
-    if (controller) {
-      controller.abort();
-      this.controllers.delete(room);
-      logger.info(`Left room: ${room}`);
-    } else {
-      logger.warn(`Attempted to leave room "${room}" but no active controller found`);
-    }
+    this.unsubscribe(room);
+    logger.info(`Left room: ${room}`);
   }
   createHeartbeat(room) {
     const heartbeat = {
@@ -4515,8 +4522,11 @@ var ServerSocket = class {
   async subscribe(room) {
     return new Promise(async (resolve, reject) => {
       try {
+        if (this.subscribedRooms.get(room)?.status === "connected") {
+          resolve();
+          return;
+        }
         const controller = new AbortController();
-        this.controllers.set(room, controller);
         this.lastPingTimes.set(room, Date.now());
         const stream = await fetch(`${this.redisUrl}/subscribe/${room}`, {
           headers: {
@@ -4525,9 +4535,14 @@ var ServerSocket = class {
           },
           signal: controller.signal
         });
+        if (this.controllers.has(room)) {
+          this.controllers.get(room)?.abort();
+        }
+        this.controllers.set(room, controller);
         const reader = stream.body?.getReader();
         const decoder = new TextDecoder();
         let buffer = "";
+        this.subscribedRooms.set(room, { status: "connected" });
         while (reader) {
           const { done, value } = await reader.read();
           resolve();
@@ -4537,7 +4552,6 @@ var ServerSocket = class {
           const messages = buffer.split("\n");
           buffer = messages.pop() || "";
           for (const message of messages) {
-            logger.info("Received message:", message);
             if (message.startsWith("data: ")) {
               const data = message.slice(6);
               try {
@@ -4552,13 +4566,26 @@ var ServerSocket = class {
                   logger.warn("Missing payload in message");
                   continue;
                 }
-                const parsed = JSON.parse(payloadStr);
-                if (parsed[0] === "ping") {
-                  logger.success("Heartbeat received successfully");
-                  this.lastPingTimes.set(room, Date.now());
+                const maybePingMessage = payloadStr.substring(0, 8);
+                if (maybePingMessage.includes("ping")) {
+                  const abortController = this.controllers.get(room);
+                  const status = this.subscribedRooms.get(room)?.status;
+                  if (!abortController || status !== "connected") {
+                    logger.warn(`Halting heartbeat for room: ${room}`);
+                    abortController?.abort();
+                    this.subscribedRooms.set(room, { status: "disconnected" });
+                    return;
+                  } else {
+                    const newLastPingTime = Date.now();
+                    const lastPingTime = this.lastPingTimes.get(room) ?? newLastPingTime;
+                    this.lastPingTimes.set(room, newLastPingTime);
+                    this.handleEvent("onHeartbeat", { lastPingTime, room });
+                    continue;
+                  }
                 }
                 if (this.ws.readyState === WebSocket.OPEN) {
-                  this.ws.send(JSON.stringify(parsed));
+                  if (typeof payloadStr === "string") this.ws.send(payloadStr);
+                  else this.ws.send(JSON.stringify(payloadStr));
                 } else {
                   logger.debug("WebSocket not open, skipping message");
                 }
@@ -4577,11 +4604,18 @@ var ServerSocket = class {
     const controller = this.controllers.get(room);
     if (controller) {
       controller.abort();
-      this.controllers.delete(room);
-      logger.info(`Unsubscribed from room: ${room}`);
     } else {
       logger.warn(`No active subscription found for room: ${room}`);
     }
+    const heartbeat = this.heartbeatTimers.get(room);
+    if (heartbeat) {
+      clearInterval(heartbeat.sender);
+      clearInterval(heartbeat.monitor);
+    }
+    this.controllers.delete(room);
+    this.heartbeatTimers.delete(room);
+    this.subscribedRooms.set(room, { status: "disconnected" });
+    logger.info(`Unsubscribed from room: ${room}`);
   }
 };
 var ClientSocket = class {
@@ -4672,7 +4706,8 @@ Fix this issue: https://jstack.app/docs/getting-started/local-development
         const [eventName, eventData] = parseResult.data;
         this.emitter.handleEvent(eventName, eventData);
       } else {
-        logger.warn("Unable to parse event:", event.data);
+        logger.warn("Unable to parse event:", event);
+        logger.warn("Raw event:", event);
       }
     };
   }
